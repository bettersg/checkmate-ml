from google.genai import types

from clients.gemini import gemini_client
import json


summary_prompt = """You are a model powering CheckMate, a product that allows users based in Singapore to send in dubious content they aren't sure whether to trust, and checks such content on their behalf.

Such content is sent via WhatsApp, and can be a text message or an image message.

Given the following inputs:
- content submitted by the user
- long-form report generated by a fact-checking model

Your job is to summarise the report into an X-style community note of around 50-100 words. This should be clear.

The note should also be written with the assumption that users have short attention spans. Thus, it should start with a clear statement that gives the user clarity on the message. For example (but not limited to):
[For messages that are clearly scams] - üö® This is a scam
[For messages that are clearly falsehoods] - ‚ùå This is likely to be untrue
[For messages that are otherwise harmful] - üõë This is likely harmful
[For messages that are from legitimate sources] - ‚úÖ This a legitimate <something>
[For information/commentary that is broadly accurate] - ‚úÖ This is largely true
[For content that warrants caution] - ‚ö†Ô∏è Be cautious
[For information/commentary that is misleading or unbalanced] - ‚ö†Ô∏è Take this with a pinch of salt

A good note would start with a clear statement like the above, and then justify it while summarising the key points of the report. There's no need to describe/summary what's in the message itself.
"""

summary_response_schema = {
    "type": "OBJECT",
    "properties": {
        "community_note": {
            "type": "STRING",
            "description": "The community note you generated, which should start with a clear statement, followed by a concise elaboration.",
        }
    },
}


async def summarise_report(initial_submission_parts, report):
    """Summarise the report"""
    parts = initial_submission_parts.copy()
    parts.append(types.Part.from_text(f"***Report***: {report}\n****End Report***"))
    messages = [types.Content(parts=parts, role="user")]
    try:
        response = gemini_client.models.generate_content(
            model="gemini-2.0-flash-exp",
            contents=messages,
            config=types.GenerateContentConfig(
                systemInstruction=summary_prompt,
                response_mime_type="application/json",
                response_schema=summary_response_schema,
                temperature=0.5,
            ),
        )
    except Exception as e:
        print(f"Error in generation: {e}")
        return {"error": str(e), "success": False}
    try:
        response_json = json.loads(response.candidates[0].content.parts[0].text)
    except Exception as e:
        print(f"Error: {e}")
        return {"success": False, "error": str(e)}
    if not isinstance(response_json, dict):
        print(f"response_json: {response_json}")
        return {"success": False, "error": "No community note generated"}
    if response_json.get("community_note"):
        return {"community_note": response_json["community_note"], "success": True}
    else:
        return {"success": False, "error": "No community note generated"}


intent_function = dict(
    name="summarise_report",
    description="Infer the user's intent.",
    parameters={
        "type": "OBJECT",
        "properties": {
            "reasoning": {
                "type": "STRING",
                "description": "The reasoning behind your choice",
            },
            "intent": {
                "type": "STRING",
                "description": "What the user's intent is, e.g. to check whether this is a scam, to check if this is really from the government, to check the facts in this article, etc.",
                "example": "The user intends to check whether this is a legitimate message sent from the government.",
            },
        },
        "required": ["reasoning", "intent"],
    },
)
